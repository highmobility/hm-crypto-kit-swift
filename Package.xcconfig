//
// Project-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 15/03/2018
// https://github.com/dempseyatgithub/BuildSettingExtractor
//


// Objective-C Automatic Reference Counting
// 
// Compiles reference-counted Objective-C code (when garbage collection is not enabled)
// to use Automatic Reference Counting. Code compiled using automated reference counting
// is compatible with other code (such as frameworks) compiled using either manual
// reference counting (for example, traditional `retain` and `release` messages) or
// automated reference counting. Using this mode is currently incompatible with compiling
// code to use Objective-C Garbage Collection.

CLANG_ENABLE_OBJC_ARC = YES



COMBINE_HIDPI_IMAGES = YES



// Dynamic Library Install Name Base
// 
// Sets the base value for the internal `install path` (`LC_ID_DYLIB`) in a dynamic
// library. This will be combined with the `EXECUTABLE_PATH` to form the full install
// path. Setting `LD_DYLIB_INSTALL_NAME` directly will override this setting. This
// setting defaults to the target's `INSTALL_PATH`. It is ignored when building any
// product other than a dynamic library.

DYLIB_INSTALL_NAME_BASE = @rpath



// Header Search Paths
// 
// This is a list of paths to folders to be searched by the compiler for included or
// imported header files when compiling C, Objective-C, C++, or Objective-C++. Paths are
// delimited by whitespace, so any paths with spaces in them need to be properly quoted.

HEADER_SEARCH_PATHS = $(SRCROOT)/.build/checkouts/**

// Beacuse config used in XCode "swift package generate-xcodeproj --xcconfig-overrides"
// gets overruled by the target settings generated by the SPM...
HEADER_SEARCH_PATHS[sdk=*] = $(SRCROOT)/.build/checkouts/**



// macOS Deployment Target
// 
// Code will load on this and later versions of macOS. Framework APIs that are
// unavailable in earlier versions will be weak-linked; your code should check for `null`
// function pointers or specific system versions before calling newer APIs.

MACOSX_DEPLOYMENT_TARGET = 10.12



// Other Linker Flags
// 
// Options defined in this setting are passed to invocations of the linker.

OTHER_LDFLAGS =

// Beacuse config used in XCode "swift package generate-xcodeproj --xcconfig-overrides"
// gets overruled by the target settings generated by the SPM...
OTHER_LDFLAGS[sdk=*] =

OTHER_LDFLAGS[sdk=macosx*] = -L/usr/local/Cellar/openssl/1.0.2n/lib -lssl -L/usr/local/Cellar/openssl/1.0.2n/lib -lcrypto



// Other Swift Flags
// 
// A list of additional flags to pass to the Swift compiler.

OTHER_SWIFT_FLAGS =

// Beacuse config used in XCode "swift package generate-xcodeproj --xcconfig-overrides"
// gets overruled by the target settings generated by the SPM...
OTHER_SWIFT_FLAGS[sdk=*] =

OTHER_SWIFT_FLAGS[sdk=macosx*] = -I/usr/local/Cellar/openssl/1.0.2n/include -I/usr/local/Cellar/openssl/1.0.2n/include



// Product Name
// 
// This is the basename of the product generated by the target.

PRODUCT_NAME = $(TARGET_NAME)



// Base SDK
// 
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the `ADDITIONAL_SDKS`
// setting.

SDKROOT = macosx



// Supported Platforms
// 
// The list of supported platforms from which a base SDK can be used. This setting is
// used if the product can be built for multiple platforms using different SDKs.

SUPPORTED_PLATFORMS = macosx iphoneos iphonesimulator appletvos appletvsimulator watchos watchsimulator



// Active Compilation Conditions
// 
// A list of compilation conditions to enable for conditional compilation expressions.

SWIFT_ACTIVE_COMPILATION_CONDITIONS = SWIFT_PACKAGE



// Use Header Maps
// 
// Enable the use of *Header Maps*, which provide the compiler with a mapping from
// textual header names to their locations, bypassing the normal compiler header search
// path mechanisms. This allows source code to include headers from various locations in
// the file system without needing to update the header search path build settings.

USE_HEADERMAP = NO
